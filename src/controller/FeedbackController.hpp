#ifndef FEEDBACK_CONTROLLER_H
#define FEEDBACK_CONTROLLER_H

#define BUFFER_LENGTH 13//

#include <cstdint>
#include <cmath>

typedef enum
{
    SQUARE,
    CHIRP,
    COSINE,
    CONTROLLER,
    NO_FEEDBACK,
} control_type_t;

typedef enum {
    CONTROL_RANGE,
    GOING_BACK_TO_START,
    SWING_UP_RANGE,
} pendulum_state_t;

class FeedbackController
{
private:
    control_type_t control_type;
    double square_wave_amplitude_pkpk = 0.002;
    uint32_t square_wave_period_microseconds = 1000000;
    double square_wave_mean = 0;
    double chirp_f0 = 0.1;
    double chirp_k = 1;
    double chirp_apkpk = 0.002;
    const double START_CONTROL_ANGLE,STOP_CONTROL_ANGLE;
    const double START_SWINGUP_ANGLE = 5*M_PI/180;
    uint32_t SQUARE_WAVE_RAISE_TIME_MICROSECONDS = 0;
    double SQUARE_WAVE_SLOPE;
    pendulum_state_t pendulum_state;
    const bool ACTIVATE_SWINGUP;
    double square_wave(uint64_t timestamp_microseconds);
    double controller(uint64_t timestamp_microseconds, double encoder_angle,double encoder_omega,double robot_pos,double robot_speed);
    double chirp(uint64_t timestamp_microseconds);
    double cosine(uint64_t timestamp_microseconds);
    void update_pendulum_state(uint64_t timestamp_microseconds, double encoder_angle,double encoder_omega,double robot_pos,double robot_speed);
    double accel_control(uint64_t timestamp_microseconds, double encoder_angle,double encoder_omega,double robot_pos,double robot_speed);
    double accel_control_swingup(uint64_t timestamp_microseconds, double encoder_angle,double encoder_omega,double robot_pos,double robot_speed);
       double accel_control_goback(uint64_t timestamp_microseconds, double encoder_angle,double encoder_omega,double robot_pos,double robot_speed);

    double vel_control(uint64_t timestamp_microseconds, double encoder_angle,double encoder_omega,double robot_pos,double robot_speed);
    double accel_buffer[BUFFER_LENGTH];
    uint32_t accel_buffer_index = 0;

    const double CYCLE_TIME;

    double last_vel = 0.0;
    double last_accel = 0.0;

    double accel_saturation = 7.0;
    double velocity_saturation = 0.3;

    const double beta = 440e-6;
    const double gamma_swingup = 10;
    const double swingup_target_angle = 2*M_PI/180.0; 
    const double m = 0.036;
    const double J = (m/12)*0.4*0.4;
    const double g = 9.81;
    const double l = 0.2378;
    double E_d;

    //double K_GAIN[BUFFER_LENGTH+5] = {35.983071320941853343811089871451,7.530853343746892747390120348427,-1.682366834137376976343603018904,-2.661492918275244701220572096645,0.209200573985711429925160587118,0.055119987695542112249302846294,0.054293204348556417526694417575,0.053931584505303109544627204741,0.053931564348266347597160574878,0.054213923139789337024563309342,0.054718087143218969992108924316,0.055397766871932353771601498238};
    //double K_GAIN[BUFFER_LENGTH+5] = {36.455823790048810906228027306497,6.248225789017755715804014471360,-2.462869392312527327959514877875,-3.191806608253501043037658746471,0.250128985127222591700046905316,0.029616315477458392962928357406,0.029784082240191429163944647485,0.029983371112294300575573657852,0.030210868199165297198760526953,0.030463680443233928651913799968,0.030739283175232577638436026746,0.031035474213418592220881109256,0.031350333693437530679926084076,0.031682188913449767231345077789,0.032029583568520210434815709277,0.032391250826387253669569332715,0.032766089765086374441249716938,0.033153144752869859179789102654};
    //double K_GAIN[BUFFER_LENGTH+5] = {44.906265386455572752311127260327,7.636820180307687166987307136878,-1.599886522396672727808208946954,-2.962213355811032844400187968859,0.369802959467800673731829874669,0.073605664789505392819890516876,0.069360066539477294167426180138,0.065709861300634150871324834497,0.062581486045936177142756662306,0.059910569226606140424973290237,0.057640783531673234207914902072,0.055722841854915973469619672187,0.054113618593118889554816064447,0.052775380630955555372185727947,0.051675114320709890358696014800,0.050783936474110592806940900346,0.050076578879355258810956996740,0.049530937165437174951598819916};
    //double K_GAIN[BUFFER_LENGTH+5] = {66.601519915733689458647859282792,9.930762250675879698746939538978,-1.594716450945224739399463942391,-3.892563757129560819691960205091,0.455060137336535774910117879699,0.080078355455345195945682235106,0.076327668345642071812129358932,0.073144654211274140465093296370,0.070459414618223289994425329041,0.068210789730823812027082908571,0.066345267630015289372913400712,0.064816029779567588264832522782,0.063582115645401823811333485992,0.062607691594533235179831365258,0.061861411056780328532322954516,0.061315854557229418353436756206,0.060947039649454783083459830095,0.060733992024070634907495502830};
    //double K_GAIN[BUFFER_LENGTH+5] = {51.579851650990214295688929269090,8.377327990775535582201882789377,-1.598184074334590754062901396537,-3.275528633128027333754062055959,0.397349233662716849746487923767,0.075734796606067009139273693563,0.071647544373810392870360885809,0.068146344399330677221726659809,0.065158866546167759636887240049,0.062621819653799676297367682309,0.060479823342454115675526082896,0.058684420648155079247576537682,0.057193213908643437959344879573,0.055969108515185973795613705306,0.054979651065755801020440429738,0.054196450135774433543023320681,0.053594669353577560622081676911,0.053152583755034489565449717929}; 
    //double K_GAIN[BUFFER_LENGTH+5] = {72.842402150911297553648182656616,11.979462444524678232937731081620,-9.564813815839702471066630096175,-9.901252085069705444198007171508,0.464764514135321438192960386004,0.080806160256201256530950161050,0.077111985265374410891681122848,0.073981730673292112054895142137,0.071346174784935212365155621228,0.069144750923794878749717440769,0.067324467210233121527984678778,0.065838961182225694268588256364,0.064647672426580982119048712775,0.063715118489803532209059255820,0.063010261176568355123706055565,0.062505951953033364598688592650,0.062178446580631152595941557593,0.062006980338538651709168192383};
    double K_GAIN[BUFFER_LENGTH+5] = {119.578435630722196947317570447922,19.258589981207574481913979980163,-18.102264647476058456732062040828,-17.910488132909016201210761209950,0.775897218108909103584380773100,0.167783930128248243152100371844,0.156585120938039834559418750359,0.146952358268489902126674451210,0.138692032684512772666707292046,0.131634725937764596181978049572,0.125632191510291396641108008225,0.120554712069992159273468246283,0.116288786789333853377570449084,0.112735107351587204860265956086,0.109806786608720702291819293350,0.107427808353323772649901002296,0.105531670603656146933957415968,0.104060198246259907883803919049};
    double K_PID[BUFFER_LENGTH+5] = {0.000000000000000000000000000000,0.000000000000000000000000000000,14.598323843308801173179745092057,6.479342051801702417890282958979,0.124206508004094773323089384576,0.033197112292957943469051684815,0.030583428944634831470050784219,0.028303292055007433364322011471,0.026315066126691263187487024311,0.024582312883250891089037537540,0.023073142517358598280186043894,0.021759645920490861686902306360,0.020617397785510027663491428029,0.019625021735299855163425775118,0.018763809734950318702795257764,0.018017389011456247382980677685,0.017371430550725274616352677981,0.016813393981935167986740964352};
public:
    void square_wave_w(float* w,uint64_t timestamp_microseconds);
    FeedbackController(control_type_t control_type_in,double start_control_angle_degrees,double stop_control_angle_degrees,uint32_t target_cycle_time_microseconds, bool activate_swingup);
    void set_square_wave_param(double frequency_hz, double amplitude_pkpk_mps, double mean_mps);
    void set_chirp_param(double f0_hz, double k , double apkpk_mps);
    double get_robot_input(uint64_t timestamp_microseconds, double encoder_angle,double encoder_omega,double robot_pos,double robot_speed);
};

#endif
